########################################################################################################################
######################################### markets configuration ###################################################
########################################################################################################################

# TODO (optional): allow markets to be run as a time series instead of simulating all of the markets
# TODO NOTE!!! Mechanism of interaction with other markets needs to only look at upwards markets (no sense to look down in the hierarchy and simply not included in the scope)

markets:
  lem_intraday:     # name of the market: TODO: markets with the same name can trade among each other
    active: True

    clearing: # TODO: Clearing needs to allow various setups such as once a day for next (day-ahead) or intraday
      type: ex-ante/ex-post

      method: pda/community

      pricing: uniform, discriminatory, standard

      horizon: 86400                    # seconds, how far into the future is the market cleared?

      interval: 900                     # TODO: implement parameter 'interval'
                                        # length of one energy delivery period
                                        # unit: seconds

      frequency: 900                    # TODO: implement parameter 'frequency'
                                        # how often is ex-ante market clearing executed?
                                        # unit: seconds

      closing: 600                      # TODO: implement parameter 'frequency'
                                        # when does the last auction occur before the delivery period
                                        # unit: seconds

    settlement:
      virtual_submeters: true           # sometimes users don't have submeters on all plants
                                        # if this is the case, a virtual meter is generated and this remaining
                                        # internal load/generation is assigned to the virtual meter

      steps_in_advance: 0               # how many steps in advance are settlement prices
                                        # posted to the platform; currently only 0 possible

    pricing:                            # prices of each retailer
      # TODO: Think about how to represent the service fees of offering the energy on a higher market and how to determine grid prices
      retailer01:                       # TODO: Currently only one retailer possible
        # TODO: Think about how to include posting of bids and offers in other markets
        bids:
          method: TBD


        energy:                         # parameters for retail energy (if market is ex-ante)
          method: fixed                 # how should retail prices be determined?
                                        # options:
                                        #   - fixed: prices as defined by 'fixed' parameter
                                        #   - file: prices contained in file provided by 'file' parameter

          fixed: {'price': [0.10, 0.01],  # fixed energy settings (retailer market offers)
                  'quantity': [1e5, 1e5], # note: first position is for selling, second for buying energy
                  }                     # TODO: Make a function that takes these values and adds suffix '_pos'/'_neg' to each -> In the end there always needs to be a time-series file

          file: retail_prices_1.csv     # file containing the energy prices and quantities for each time step

          quality: na                   # quality that the offered energy should be labelled with on the lem

          source: 2                     # source of the energy: relevant for grid fees
        # TODO: Think about how to include hierarchical grid fees
        grid:                           # parameters for grid fees
          method: fixed                 # how should balancing energy prices be set?
                                        # options:
                                        #   - fixed: prices as defined by 'fixed' parameter
                                        #   - file: prices contained in file provided by 'file' parameter
                                        # balancing energy is the market participants deviation from the market
                                        # result. the balancing price is the incentive for the agent to stick
                                        # to the market result, or to assist the system in restoring its balance

          fixed: {0: [0, 0.4],     # fixed fees settings
                  1: [0, 0.2],
                  2: [0, 0.2],
                 }

          file: grid_fees_1.csv         # file containing the grid fees for each time step

        levies:                         # parameters for balancing energy
          method: fixed                 # how should balancing energy prices be set?
                                        # options:
                                        #   - fixed: prices as defined by 'fixed' parameter
                                        #   - file: prices contained in file provided by 'file' parameter
                                        # balancing energy is the market participants deviation from the market
                                        # result. the balancing price is the incentive for the agent to stick
                                        # to the market result, or to assist the system in restoring its balance

          fixed: {price: [0, 0.18],     # fixed levies settings
                 }

          file: levies_prices_1.csv     # file containing the levies prices for each time step

        balancing:                      # parameters for balancing energy
          method: fixed                 # how should balancing energy prices be set?
                                        # options:
                                        #   - fixed: prices as defined by 'fixed' parameter
                                        #   - file: prices contained in file provided by 'file' parameter
                                        # balancing energy is the market participants deviation from the market
                                        # result. the balancing price is the incentive for the agent to stick
                                        # to the market result, or to assist the system in restoring its balance

          fixed: {price: [0.10, 0,10],  # fixed balancing settings
                 }

          file: balancing_prices_1.csv  # file containing the balancing energy prices for each time step

    types:
      qualities: {0: na,
                  1: local,
                  2: green_local
                 }

      positions: {0: offer,
                  1: bid,
                 }

      transactions: {0: energy,
                     1: balancing,
                     2: levy,
                    }

      meter: {0: plant submeter,
              1: virtual plant submeter,
              2: dividing meter,
              3: virtual dividing meter,
              4: grid meter,
              5: virtual grid meter }

  lfm_01:
    active: False

  lhm_01:
    active: False

  lh2m_01:
    active: False

# OLD

lem:
  ################# market settings #####################
  types_clearing_ex_ante: {0: pda}
  types_clearing_ex_post: {0: community}
                                            # market types to be calculated
                                            # settlement and prosumers observe the first
                                            # listed result, other choices are merely
                                            # calculated for comparison

                                            # for currently implemented choices, see the
                                            # documentation

                                            # the ex_post_pricing ex-post solution is always
                                            # calculated in parallel. if no ex-ante clearing
                                            # type is listed, the ex_post_pricing will be
                                            # used for settlement and no ex-ante trading
                                            # is simulated

  types_pricing_ex_ante: {0: uniform, 1: discriminatory}
  types_pricing_ex_post: {0: standard}      # which clearing price variants to be calculated
                                            # for each clearing type
                                            # settlement and prosumers observe the first
                                            # listed variation, other choices are merely
                                            # calculated for comparison

                                            # for currently implemented choices, see the
                                            # documentation

  # share_quality_logging_extended: true      # in ex-ante trading, market results can be labelled in
                                            # simply (quality of cleared generation) or more
                                            # extensively (quality of cleared generation, consumption
                                            # as well as offered generation and consumption bids)
                                            # for more information, see the documentation

  ################# advanced market settings #####################

  types_quality: {0: na, 1: local, 2: green_local}

  types_position: {0: offer, 1: bid}

  types_transaction: {0: market, 1: balancing, 2: levy_prices}

  positions_delete: true                    # true -> submitted positions are deleted from the market
                                            # positions table after being processed

  positions_archive: true                   # true -> all submitted positions are archived before
                                            # deletion

  horizon_clearing: 86400                   # seconds, how far into the future is the market cleared?

  # these two parameters are currently not implemented
  interval_clearing: 900                    # seconds, length of one energy delivery period (ts_delivery)
  frequency_clearing: 900                   # seconds, how often is ex-ante market clearing executed?

  ################# settlement settings #####################

  calculate_virtual_submeters: true         # sometimes users don't have submeters on all plants
                                            # if this is the case, a virtual meter is generated and this remaining
                                            # internal load/generation is assigned to the virtual meter

  prices_settlement_in_advance: 0           # how many steps in advance are settlement prices
                                            # posted to the platform; currently only 0 possible

  types_meter: {0: plant submeter, 1: virtual plant submeter, 2: dividing meter, 3: virtual
      dividing meter, 4: grid meter, 5: virtual grid meter}

  # defining balancing energy pricing
  bal_energy_pricing_mechanism: fixed       # how should balancing energy prices be set?
                                            #      "fixed" - dual prices as defined below
                                            #      "file" - prices are given as time series in input file below
                                            # balancing energy is the market participants deviation from the market
                                            # result. the balancing price is the incentive for the agent to stick
                                            # to the market result, or to assist the system in restoring
                                            # its balance

  path_bal_prices: balancing_prices_1.csv

  price_energy_balancing_positive: 0.10     # fixed balancing prices in c/kwh
  price_energy_balancing_negative: 0.10

  # defining electricity levy_prices

  levy_pricing_mechanism: fixed             # how should levy prices be determined?
                                            # levies are those fees added to the market price of electricity
                                            # to account for grid fees, taxes, etc. often levied as a volumetric
                                            # tariff.
                                            #      "fixed" - dual prices as defined below
                                            #      "file" - prices are given as time series in input file below

  path_levy_prices: levy_prices_1.csv

  price_energy_levies_negative: 0.18        # "fixed" levy price if desired
  price_energy_levies_positive: 0

########################################################################################################################
########################################### retailer configuration #####################################################
########################################################################################################################

retailer:                                   # for the retailer's role in the market, please see the docs

  "retail_pricing_mechanism": "fixed"       # how should retail prices be determined?
                                            #      "fixed" - dual prices as defined below
                                            #      "file" - prices are given as time series in input file below

  "path_retail_prices": "retail_prices_1.csv"

  "price_sell": 0.10                        # retailer market ceiling offer one step before delivery
  "price_buy": 0.01                         # retailer market floor offer one step before delivery

  "qty_energy_bid": 1000000                 # energy quantity of retailer bid in wh
  "qty_energy_offer": 1000000               # energy quantity of retailer offer in wh

  "quality": "na"                           # quality that the generated energy should be labelled with on the lem

  "id_user": "retailer01"                   # retailer market id
